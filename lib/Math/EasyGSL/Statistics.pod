=head1 NAME

Math::EasyGSL::Statistics - [Functions] various statistics functions

=head1 SYNOPSIS

 use Math::EasyGSL::Statistics ':all';

=head1 EXPORT

By default there are no functions exported. You can import into your
program all available functions by calling:

 use Math::EasyGSL::Statistics ':all';

Or you can import just selected functions:

 use Math::EasyGSL::Statistics qw(stats_mean stats_median);

There are no other import tags.

=head1 DESCRIPTION

This module contains many statistical functions. The basic statistical functions
include routines to compute the mean, variance and standard deviation. More 
advanced functions allow you to calculate absolute deviations, skewness, 
and kurtosis as well as the median and arbitrary percentiles. The algorithms 
use recurrence relations to compute average quantities in a stable way, without 
large intermediate values that might overflow.

=head1 FUNCTIONS

=head2 Mean, Standard Deviation and Variance

=head3 stats_mean

 $result = stats_mean(\@data);

This function returns the arithmetic mean of I<data>. The arithmetic mean, or B<sample
mean>, is denoted by \Hat\mu and defined as, where x_i are the elements
of the dataset I<data>. For samples drawn from a gaussian distribution
the variance of \Hat\mu is \sigma^2 / N.

=head3 stats_variance

 $result = stats_variance(\@data);

This function returns the estimated, or B<sample>, variance of I<data>. The estimated variance
is denoted by \Hat\sigma^2 and is defined by, where x_i are the
elements of the dataset I<data>. Note that the normalization factor of
1/(N-1) results from the derivation of \Hat\sigma^2 as an unbiased
estimator of the population variance \sigma^2. For samples drawn from a
Gaussian distribution the variance of \Hat\sigma^2 itself is 2 \sigma^4
/ N.

This function computes the mean via a call to C<gsl_stats_mean>. If you
have already computed the mean then you can pass it directly to
C<gsl_stats_variance_m>.

=head3 stats_variance_m

 $result = stats_variance_m(\@data, $mean);

This function returns the sample variance of I<data> relative to the
given value of I<mean>. The function is computed with \Hat\mu replaced
by the value of I<mean> that you supply,

=head3 stats_sd

 $result = stats_sd(\@data);

=head3 stats_sd_m

 $result = stats_sd_m(\@data, $mean);

The standard deviation is defined as the square root of the variance.
These functions return the square root of the corresponding variance
functions above.

=head3 stats_tss

 $result = stats_tss(\@data);

=head3 stats_tss_m

 $result = stats_tss_m(\@data, $mean);

These functions return the total sum of squares (TSS) of I<data> about
the mean. For C<gsl_stats_tss_m> the user-supplied value of I<mean> is
used, and for C<gsl_stats_tss> it is computed using C<gsl_stats_mean>.

=head3 stats_variance_with_fixed_mean

 $result = stats_variance_with_fixed_mean(\@data, $mean);

This function computes an unbiased estimate of the variance of I<data>
when the population mean I<mean> of the underlying distribution is
known I<a priori>. In this case the estimator for the variance uses the
factor 1/N and the sample mean \Hat\mu is replaced by the known
population mean \mu,

=head3 stats_sd_with_fixed_mean

 $result = stats_sd_with_fixed_mean(\@data, $mean);

This function calculates the standard deviation of I<data> for a fixed
population mean I<mean>. The result is the square root of the
corresponding variance function.

=head2 Absolute deviation

=head3 stats_absdev

 $result = stats_absdev(\@data);

This function computes the absolute deviation from the mean of I<data>. The absolute deviation
from the mean is defined as, where x_i are the elements of the dataset
I<data>. The absolute deviation from the mean provides a more robust
measure of the width of a distribution than the variance. This function
computes the mean of I<data> via a call to C<gsl_stats_mean>.

=head3 stats_absdev_m

 $result = stats_absdev_m(\@data, $mean);

This function computes the absolute deviation of the dataset I<data>
relative to the given value of I<mean>, This function is useful if you
have already computed the mean of I<data> (and want to avoid
recomputing it), or wish to calculate the absolute deviation relative
to another value (such as zero, or the median).

=head2 Higher moments (skewness and kurtosis)

=head3 stats_skew

 $result = stats_skew(\@data);

This function computes the skewness of I<data>. The skewness is defined as, where x_i are
the elements of the dataset I<data>. The skewness measures the
asymmetry of the tails of a distribution.

The function computes the mean and estimated standard deviation of
I<data> via calls to C<gsl_stats_mean> and C<gsl_stats_sd>.

=head3 stats_skew_m_sd

 $result = stats_skew_m_sd(\@data, $mean, $sd);

This function computes the skewness of the dataset I<data> using the
given values of the mean I<mean> and standard deviation I<sd>, These
functions are useful if you have already computed the mean and standard
deviation of I<data> and want to avoid recomputing them.

=head3 stats_kurtosis

 $result = stats_kurtosis(\@data);

This function computes the kurtosis of I<data>. The kurtosis is defined as, The kurtosis
measures how sharply peaked a distribution is, relative to its width.
The kurtosis is normalized to zero for a Gaussian distribution.

=head3 stats_kurtosis_m_sd

 $result = stats_kurtosis_m_sd(\@data, $mean, $sd);

This function computes the kurtosis of the dataset I<data> using the
given values of the mean I<mean> and standard deviation I<sd>, This
function is useful if you have already computed the mean and standard
deviation of I<data> and want to avoid recomputing them.

=head2 Autocorrelation

=head3 stats_lag1_autocorrelation

 $result = stats_lag1_autocorrelation(\@data);

This function computes the lag-1 autocorrelation of the dataset
I<data>.

=head3 stats_lag1_autocorrelation_m

 $result = stats_lag1_autocorrelation_m(\@data, $mean);

This function computes the lag-1 autocorrelation of the dataset I<data>
using the given value of the mean I<mean>.

=head2 Covariance

=head3 stats_covariance

 $result = stats_covariance(\@data1, \@data2);

This function computes the covariance of the datasets I<data1> and
I<data2> which must both be of the same length I<n>.

=head3 stats_covariance_m

 $result = stats_covariance_m(\@data1, \@data2, $mean1, $mean2);

This function computes the covariance of the datasets I<data1> and
I<data2> using the given values of the means, I<mean1> and I<mean2>.
This is useful if you have already computed the means of I<data1> and
I<data2> and want to avoid recomputing them.

=head2 Correlation

=head3 stats_correlation

 $result = stats_correlation(\@data1, \@data2);

This function efficiently computes the Pearson correlation coefficient
between the datasets I<data1> and I<data2> which must both be of the
same length I<n>.

=head2 Weighted Samples

The functions described in this section allow the computation of
statistics for weighted samples. The functions accept an array of
samples, x_i, with associated weights, w_i. Each sample x_i is
considered as having been drawn from a Gaussian distribution with
variance \sigma_i^2. The sample weight w_i is defined as the reciprocal
of this variance, w_i = 1/\sigma_i^2. Setting a weight to zero
corresponds to removing a sample from a dataset.

=head3 stats_wmean

 $result = stats_wmean(\@w, \@data);

This function returns the weighted mean of the dataset I<data>, 
using the set of weights I<w>. The weighted mean is defined as ...

=head3 stats_wvariance

 $result = stats_wvariance(\@w, \@data);

This function returns the estimated variance of the dataset I<data>, 
using the set of weights I<w>. The estimated variance of a
weighted dataset is calculated as, Note that this expression reduces to
an unweighted variance with the familiar 1/(N-1) factor when there are
N equal non-zero weights.

=head3 stats_wvariance_m

 $result = stats_wvariance_m(\@w, \@data, $wmean);

This function returns the estimated variance of the weighted dataset
I<data> using the given weighted mean I<wmean>.

=head3 stats_wsd

 $result = stats_wsd(\@w, \@data);

The standard deviation is defined as the square root of the variance.
This function returns the square root of the corresponding variance
function C<gsl_stats_wvariance> above.

=head3 stats_wsd_m

 $result = stats_wsd_m(\@w, \@data, $wmean);

This function returns the square root of the corresponding variance
function C<gsl_stats_wvariance_m> above.

=head3 stats_wvariance_with_fixed_mean

 $result = stats_wvariance_with_fixed_mean(\@w, \@data, $mean);

This function computes an unbiased estimate of the variance of the
weighted dataset I<data> when the population mean I<mean> of the
underlying distribution is known I<a priori>. In this case the
estimator for the variance replaces the sample mean \Hat\mu by the
known population mean \mu,

=head3 stats_wsd_with_fixed_mean

 $result = stats_wsd_with_fixed_mean(\@w, \@data, $mean);

The standard deviation is defined as the square root of the variance.
This function returns the square root of the corresponding variance
function above.

=head3 stats_wtss

 $result = stats_wtss(\@w, \@data);

=head3 stats_wtss_m

 $result = stats_wtss_m(\@w, \@data, $wmean);

These functions return the weighted total sum of squares (TSS) of
I<data> about the weighted mean. For C<gsl_stats_wtss_m> the
user-supplied value of I<wmean> is used, and for C<gsl_stats_wtss> it
is computed using C<gsl_stats_wmean>.

=head3 stats_wabsdev

 $result = stats_wabsdev(\@w, \@data);

This function computes the weighted absolute deviation from the
weighted mean of I<data>. The absolute deviation from the mean is
defined as,

=head3 stats_wabsdev_m

 $result = stats_wabsdev_m(\@w, \@data, $wmean);

This function computes the absolute deviation of the weighted dataset
I<data> about the given weighted mean I<wmean>.

=head3 stats_wskew

 $result = stats_wskew(\@w, \@data);

This function computes the weighted skewness of the dataset I<data>.

=head3 stats_wskew_m_sd

 $result = stats_wskew_m_sd(\@w, \@data, $wmean, $wsd);

This function computes the weighted skewness of the dataset I<data>
using the given values of the weighted mean and weighted standard
deviation, I<wmean> and I<wsd>.

=head3 stats_wkurtosis

 $result = stats_wkurtosis(\@w, \@data);

This function computes the weighted kurtosis of the dataset I<data>.

=head3 stats_wkurtosis_m_sd

 $result = stats_wkurtosis_m_sd(\@w, \@data, $wmean, $wsd);

This function computes the weighted kurtosis of the dataset I<data>
using the given values of the weighted mean and weighted standard
deviation, I<wmean> and I<wsd>.

=head2 Maximum and Minimum values

The following functions find the maximum and minimum values of a
dataset (or their indices). If the data contains C<NaN>s then a C<NaN>
will be returned, since the maximum or minimum value is undefined. For
functions which return an index, the location of the first C<NaN> in
the array is returned.

=head3 stats_max

 $result = stats_max(\@data);

This function returns the maximum value in I<data>. The maximum value is defined as the value
of the element x_i which satisfies x_i E<gt>= x_j for all j.

If you want instead to find the element with the largest absolute
magnitude you will need to apply C<fabs> or C<abs> to your data before
calling this function.

=head3 stats_min

 $result = stats_min(\@data);

This function returns the minimum value in I<data>. The minimum value is defined as the value
of the element x_i which satisfies x_i E<lt>= x_j for all j.

If you want instead to find the element with the smallest absolute
magnitude you will need to apply C<fabs> or C<abs> to your data before
calling this function.

=head3 stats_minmax

 ($min, $max) = stats_minmax(\@data);

This function finds both the minimum and maximum values I<min>, I<max>
in I<data> in a single pass.

=head3 stats_max_index

 $result = stats_max_index(\@data);

This function returns the index of the maximum value in I<data>. The maximum value is
defined as the value of the element x_i which satisfies x_i E<gt>= x_j
for all j. When there are several equal maximum elements then the first
one is chosen.

=head3 stats_min_index

 $result = stats_min_index(\@data);

This function returns the index of the minimum value in I<data>. The minimum value is
defined as the value of the element x_i which satisfies x_i E<gt>= x_j
for all j. When there are several equal minimum elements then the first
one is chosen.

=head3 stats_minmax_index

 ($min_index, $max_index) = stats_minmax_index(\@data);

This function returns the indexes I<min_index>, I<max_index> of the
minimum and maximum values in I<data> in a single pass.

=head2 Median and Percentiles

The median and percentile functions described in this section operate
on sorted data. For convenience we use B<quantiles>, measured on a
scale of 0 to 1, instead of percentiles (which use a scale of 0 to
100).

=head3 stats_median

 $result = stats_median(\@data);

This function returns the median value of I<data>. 

When the dataset has an odd number of elements the median is the value
of element (n-1)/2. When the dataset has an even number of elements the
median is the mean of the two nearest middle values, elements (n-1)/2
and n/2. Since the algorithm for computing the median involves
interpolation this function always returns a floating-point number,
even for integer data types.

=head3 stats_quantile

 $result = stats_quantile(\@data, $f);

This function returns a quantile value of I<data>. The
quantile is determined by the I<f>, a fraction between 0 and 1. For
example, to compute the value of the 75th percentile I<f> should have
the value 0.75.

The quantile is found by interpolation, using the formula where i is
C<floor>((n - 1)f) and \delta is (n-1)f - i.

Thus the minimum value of the array C<data> is given by
I<f> equal to zero, the maximum value is given
by I<f> equal to one and the median value is given by I<f> equal to
0.5. Since the algorithm for computing quantiles involves interpolation
this function always returns a floating-point number, even for integer
data types.

=head1 SEE ALSO

L<Math::EasyGSL>
